version: 2.1
# TODO: validate gradle wrapper to guard against malicious jar files
executors:
  docker-api29:
    docker:
      - image: circleci/android:api-29 # no auth needed here, because this is a public image
    working_directory: ~/Readit
    environment:
      JAVA_OPTS: "-Xmx3072m" # allocate 3 GB for this executor, total GBs available: 4
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true"

jobs:
  build:
    executor: docker-api29
    steps: # there is some investigation to be done here
      - checkout
      - run:
          name: Export Json file to CI environment # as this file is needed by build command
          command: echo 'export FIREBASE_SERVICES_JSON="$FIREBASE_SERVICES_JSON"' >> $BASH_ENV
      - run:
          name: Decode the exported file
          command: echo $FIREBASE_SERVICES_JSON | base64 -di > core/google-services.json
      - restore_cache: # each time dependencies updated or changes, increment "v1"
          key: deps-v1-{{ checksum "build.gradle" }}-{{ checksum "**/build.gradle" }}
      - run:
          name: Download dependencies to save time
          command: ./gradlew androidDependencies
      - save_cache: # then save cache after downloading
          paths:
            - ~/.gradle  # also, don't forget to save gradle cache to save more time next run
          key: deps-v1-{{ checksum "build.gradle" }}-{{ checksum "**/build.gradle" }}
      - run:
          name: Build the whole project and provide stacktrace
          command: ./gradlew assemble --stacktrace
      - run:
          name: Run ktlint check            # first, Run ktlint check
          command: ./gradlew lintKotlin
      - run:
          name: Format files if applicable
          command: ./gradlew formatKotlin
      - run:
          name: Run android lint           # second, Run android lint check
          command: ./gradlew lintDebug
      - persist_to_workspace:
          root: .
          paths:
            - build
            - ./**/build
  test:
    executor: docker-api29
#    parallelism: 3        # Uncomment test splitting optimization Once you upgrade your plan
    steps:
      - checkout
#      - run:
#          name: Split tests
#          command: .circleci/scripts/split_tests.sh # circleci tests glob "/**/test/**/*.kt" | circleci tests split --split-by=timings
      - attach_workspace:
          at: ./**/build
      - run:
          name: Run Unit tests
          command: ./gradlew testDebugUnitTest
      - store_test_results:
          path: test-results

workflows:
  regression-workflow: # check everything is OK
    jobs:
      - build
      - test:
          requires:
            - build